<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('User', 'default');

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property enum $role
 * @property string $username
 * @property string $password
 * @property string $email
 * @property string $display_name
 * @property boolean $activated
 * @property boolean $banned
 * @property string $ban_reason
 * @property string $new_password_key
 * @property timestamp $new_password_requested
 * @property string $new_email
 * @property string $new_email_key
 * @property Doctrine_Collection $Apikey
 * @property Doctrine_Collection $Autologin
 * @property Doctrine_Collection $Access
 * @property Doctrine_Collection $Role
 * @property Doctrine_Collection $ContactAddressBook
 * @property Doctrine_Collection $Invitation
 * @property Doctrine_Collection $InviteBulk
 * @property Doctrine_Collection $JanrainEngage
 * @property Doctrine_Collection $Organization
 * @property Doctrine_Collection $OrganizationStaff
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('id', 'integer', 10, array(
             'primary' => true,
             'unsigned' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'length' => '10',
             ));
        $this->hasColumn('role', 'enum', null, array(
             'default' => 'buyer',
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'super_admin',
              1 => 'admin',
              2 => 'buyer',
              3 => 'agent',
              4 => 'merchant',
             ),
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('email', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('display_name', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('activated', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('banned', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('ban_reason', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('new_password_key', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('new_password_requested', 'timestamp', 25, array(
             'type' => 'timestamp',
             'length' => '25',
             ));
        $this->hasColumn('new_email', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('new_email_key', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));


        $this->index('username_index', array(
             'fields' => 
             array(
              0 => 'username',
             ),
             'type' => 'unique',
             ));
        $this->index('email_index', array(
             'fields' => 
             array(
              0 => 'email',
             ),
             'type' => 'unique',
             ));
        $this->index('activated_index', array(
             'fields' => 
             array(
              0 => 'activated',
             ),
             ));
        $this->index('banned_index', array(
             'fields' => 
             array(
              0 => 'banned',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Apikey', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Autologin', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Access', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Role', array(
             'local' => 'id',
             'foreign' => 'User_id'));

        $this->hasMany('ContactAddressBook', array(
             'local' => 'id',
             'foreign' => 'User_id'));

        $this->hasMany('Invitation', array(
             'local' => 'id',
             'foreign' => 'To_id'));

        $this->hasMany('InviteBulk', array(
             'local' => 'id',
             'foreign' => 'User_id'));

        $this->hasMany('JanrainEngage', array(
             'local' => 'id',
             'foreign' => 'User_id'));

        $this->hasMany('Organization', array(
             'local' => 'id',
             'foreign' => 'owner_id'));

        $this->hasMany('OrganizationStaff', array(
             'local' => 'id',
             'foreign' => 'User_id'));

        $versionable0 = new Doctrine_Template_Versionable();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'unique' => true,
             'fields' => 
             array(
              0 => 'username',
             ),
             'uniqueBy' => 
             array(
              0 => 'username',
             ),
             'uniqueIndex' => true,
             'canUpdate' => true,
             ));
        $this->actAs($versionable0);
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}