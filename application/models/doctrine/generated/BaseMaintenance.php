<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Maintenance', 'default');

/**
 * BaseMaintenance
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property enum $mode
 * @property blob $message
 * @property timestamp $start_datetime
 * @property timestamp $end_datetime
 * @property enum $recurring
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMaintenance extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('maintenance');
        $this->hasColumn('mode', 'enum', null, array(
             'primary' => true,
             'type' => 'enum',
             'values' => 
             array(
              0 => 'enabled',
              1 => 'disabled',
             ),
             ));
        $this->hasColumn('message', 'blob', null, array(
             'type' => 'blob',
             'notnull' => true,
             ));
        $this->hasColumn('start_datetime', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('end_datetime', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('recurring', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'yes',
              1 => 'no',
             ),
             ));


        $this->index('mm_data', array(
             'fields' => 
             array(
              0 => 'recurring',
              1 => 'start_datetime',
              2 => 'end_datetime',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $versionable0 = new Doctrine_Template_Versionable();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($versionable0);
        $this->actAs($timestampable0);
    }
}