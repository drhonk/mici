<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ContactAddress', 'default');

/**
 * BaseContactAddress
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property boolean $is_default
 * @property boolean $is_valid
 * @property enum $type
 * @property string $country_code
 * @property string $country_name
 * @property string $region_name
 * @property string $city
 * @property string $address
 * @property string $address_alt
 * @property string $zip_postal_code
 * @property decimal $latitude
 * @property decimal $longitude
 * @property integer $ContactAddressBook_id
 * @property ContactAddressBook $ContactAddressBook
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseContactAddress extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('contact_address_book_address');
        $this->hasColumn('id', 'integer', 10, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'length' => '10',
             ));
        $this->hasColumn('is_default', 'boolean', 1, array(
             'default' => 0,
             'type' => 'boolean',
             'notnull' => true,
             'length' => '1',
             ));
        $this->hasColumn('is_valid', 'boolean', 1, array(
             'type' => 'boolean',
             'length' => '1',
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'work',
              1 => 'home',
              2 => 'other',
              3 => 'physical',
              4 => 'shipping',
              5 => 'billing',
             ),
             ));
        $this->hasColumn('country_code', 'string', 2, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '2',
             ));
        $this->hasColumn('country_name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '100',
             ));
        $this->hasColumn('region_name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '100',
             ));
        $this->hasColumn('city', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '100',
             ));
        $this->hasColumn('address', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('address_alt', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('zip_postal_code', 'string', 10, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '10',
             ));
        $this->hasColumn('latitude', 'decimal', 15, array(
             'scale' => 6,
             'type' => 'decimal',
             'length' => '15',
             ));
        $this->hasColumn('longitude', 'decimal', 15, array(
             'scale' => 6,
             'type' => 'decimal',
             'length' => '15',
             ));
        $this->hasColumn('ContactAddressBook_id', 'integer', 10, array(
             'type' => 'integer',
             'length' => '10',
             ));


        $this->index('address_trype', array(
             'fields' => 
             array(
              0 => 'type',
             ),
             ));
        $this->index('country_code', array(
             'fields' => 
             array(
              0 => 'country_code',
             ),
             ));
        $this->index('region_name', array(
             'fields' => 
             array(
              0 => 'region_name',
             ),
             ));
        $this->index('city', array(
             'fields' => 
             array(
              0 => 'city',
             ),
             ));
        $this->index('postal_code', array(
             'fields' => 
             array(
              0 => 'zip_postal_code',
             ),
             ));
        $this->index('is_default', array(
             'fields' => 
             array(
              0 => 'is_default',
             ),
             ));
        $this->index('is_valid', array(
             'fields' => 
             array(
              0 => 'is_valid',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ContactAddressBook', array(
             'local' => 'ContactAddressBook_id',
             'foreign' => 'id'));

        $versionable0 = new Doctrine_Template_Versionable();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $searchable0 = new Doctrine_Template_Searchable(array(
             'fields' => 
             array(
              0 => 'type',
              1 => 'address',
             ),
             ));
        $trackauthor0 = new TrackAuthor();
        $this->actAs($versionable0);
        $this->actAs($timestampable0);
        $this->actAs($searchable0);
        $this->actAs($trackauthor0);
    }
}