<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ContactAddressBook', 'default');

/**
 * BaseContactAddressBook
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property enum $status
 * @property boolean $is_profile
 * @property enum $type
 * @property string $first_name
 * @property string $last_name
 * @property string $company_name
 * @property string $title
 * @property blob $comment
 * @property enum $default_contact
 * @property integer $User_id
 * @property User $User
 * @property Doctrine_Collection $ContactPhone
 * @property Doctrine_Collection $ContactAddress
 * @property Doctrine_Collection $ContactEmail
 * @property Doctrine_Collection $ContactWebsite
 * @property Doctrine_Collection $Organization
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseContactAddressBook extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('contact_address_book');
        $this->hasColumn('id', 'integer', 10, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'length' => '10',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'default' => 'active',
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'active',
              1 => 'disabled',
             ),
             ));
        $this->hasColumn('is_profile', 'boolean', 1, array(
             'default' => 0,
             'type' => 'boolean',
             'notnull' => true,
             'length' => '1',
             ));
        $this->hasColumn('type', 'enum', null, array(
             'default' => 'individual',
             'type' => 'enum',
             'values' => 
             array(
              0 => 'individual',
              1 => 'company',
             ),
             ));
        $this->hasColumn('first_name', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('last_name', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('company_name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('comment', 'blob', null, array(
             'type' => 'blob',
             ));
        $this->hasColumn('default_contact', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'mail',
              1 => 'email',
              2 => 'phone',
              3 => 'website',
              4 => 'messaging',
             ),
             ));
        $this->hasColumn('User_id', 'integer', 10, array(
             'type' => 'integer',
             'length' => '10',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'User_id',
             'foreign' => 'id'));

        $this->hasMany('ContactPhone', array(
             'local' => 'id',
             'foreign' => 'ContactAddressBook_id'));

        $this->hasMany('ContactAddress', array(
             'local' => 'id',
             'foreign' => 'ContactAddressBook_id'));

        $this->hasMany('ContactEmail', array(
             'local' => 'id',
             'foreign' => 'ContactAddressBook_id'));

        $this->hasMany('ContactWebsite', array(
             'local' => 'id',
             'foreign' => 'ContactAddressBook_id'));

        $this->hasMany('Organization', array(
             'local' => 'id',
             'foreign' => 'ContactAddressBook_id'));

        $versionable0 = new Doctrine_Template_Versionable();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'unique' => false,
             'options' => NULL,
             'fields' => 
             array(
              0 => 'first_name',
              1 => 'last_name',
              2 => 'title',
             ),
             'canUpdate' => true,
             ));
        $searchable0 = new Doctrine_Template_Searchable(array(
             'fields' => 
             array(
              0 => 'first_name',
              1 => 'last_name',
              2 => 'company_name',
             ),
             ));
        $taggable0 = new Taggable();
        $trackauthor0 = new TrackAuthor();
        $this->actAs($versionable0);
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
        $this->actAs($searchable0);
        $this->actAs($taggable0);
        $this->actAs($trackauthor0);
    }
}